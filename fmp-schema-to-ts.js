const fs = require('fs');
const path = require('path');
const axios = require('axios');
const https = require('https');

const INDENT = 2;

/**
 * –°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
 */
function createGroupDir(outputDir, groupName) {
    const dir = path.join(outputDir, groupName);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, {recursive: true});
    }
    return dir;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç index.ts —Å —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã.
 */
function generateGroupIndex(groupDir, interfaces) {
    const content = interfaces
        .map(name => `export * from './${name}';`)
        .join('\n');
    fs.writeFileSync(path.join(groupDir, 'index.ts'), content);
}

function hasFields(input) {
    return (
        (input.scalar && input.scalar?.length > 0) ||
        (input.tabular && input.tabular?.length > 0)
    );
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
 */
function safeCleanDir(outputDir) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
            return;
        }

        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
        const files = fs.readdirSync(outputDir);

        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏ –ø—É—Å—Ç—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏
        for (const file of files) {
            const filePath = path.join(outputDir, file);
            const stat = fs.lstatSync(filePath);

            if (stat.isDirectory()) {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É
                safeCleanDir(filePath);
                fs.rmSync(filePath); // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É
            } else {
                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                fs.unlinkSync(filePath);
            }
        }
    } catch (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ ${outputDir}:`, error.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å
    }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø FMP –≤ TypeScript-—Ç–∏–ø.
 * @param {string} fmpType - –¢–∏–ø –ø–æ–ª—è –∏–∑ FMP (–Ω–∞–ø—Ä–∏–º–µ—Ä, "TEXT", "BIGINT").
 * @returns {string} - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π TS-—Ç–∏–ø.
 */
function getTSType(fmpType) {
    const typeMap = {
        TEXT: 'string',
        BIGINT: 'number',
        D: 'string', // –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
        T: 'string', // –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM:SS"
        N: 'string', // –ß–∏—Å–ª–æ, –Ω–æ –≤ FMP –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        C: 'string', // –°–∏–º–≤–æ–ª—å–Ω—ã–π —Ç–∏–ø
        b: 'number'  // BIGINT (–±–∏–Ω–∞—Ä–Ω—ã–π)
    };
    return typeMap[fmpType] || 'any';
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ö–µ–º—É FMP –ø–æ API.
 * @param {string} url - URL API FMP.
 * @param {string} authToken - –¢–æ–∫–µ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization.
 * @returns {Promise<object>} - JSON-—Å—Ö–µ–º–∞.
 * @throws {Error} - –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–Ω—ã–π.
 */
async function fetchFMPSchema(url, authToken) {
    if (!authToken) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!');
    }

    try {
        const agent = new https.Agent({rejectUnauthorized: false});
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${authToken}`,
                'Content-Type': 'application/json'
            },
            httpsAgent: agent,
        });

        return response.data;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º—ã: ${error.response?.status || error.message}`);
    }
}

function sanitizeInterfaceName(name) {
    return name
        ?.replace(/[^a-zA-Z0-9_\s]/g, '')  // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ _
        .replace(/\s+/g, '_')             // –ü—Ä–æ–±–µ–ª—ã ‚Üí _
        .replace(/^[0-9_]+/, '')          // –£–¥–∞–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –∏ _ –≤ –Ω–∞—á–∞–ª–µ
        .split('_')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join('_') ?? 'undefined';
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TS-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö FMP.
 * @private
 */
function generateInterfaceCode(name, data) {
    let code = '/**\n' +
        ' * Generated by FMP Schema to TS.\n' +
        ' * Do not edit manually.\n' +
        ' */\n';

    if (data.scalar?.length === 0 && data.tabular?.length === 0) {
        return '';
    }

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    code += `export type ${name} = `;

    // –°–∫–∞–ª—è—Ä–Ω—ã–µ –ø–æ–ª—è
    if (data.scalar && data.scalar.length > 0) {
        code += '{\n';
        data.scalar.forEach(field => {
            code += `${' '.repeat(INDENT)}"${field.name}": ${getTSType(field.type)};\n`;
        });
        if (data.tabular && data.tabular.length > 0) {
            code += '';
        } else {
            code += '};\n';
        }
    }

    // –¢–∞–±–ª–∏—á–Ω—ã–µ –ø–æ–ª—è (–º–∞—Å—Å–∏–≤—ã)
    if (data.tabular && data.tabular.length > 0) {
        data.tabular.forEach(table => {
            const tableName = table.name ? `_${table?.name}` : '';
            const interfaceName = sanitizeInterfaceName(`${name}${tableName}`);

            if (data.scalar && data.scalar.length > 0) {
                code += `${' '.repeat(INDENT)}"${table?.name}": ${interfaceName}[];\n`;
                code += '}\n';
            } else {
                code += `${interfaceName}[];\n`;
            }

            // –í–ª–æ–∂–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            code += `\ntype ${interfaceName} = {\n`;
            table.columns.forEach(column => {
                code += `${' '.repeat(INDENT)}"${column.name}": ${getTSType(column.type)};\n`;
            });
            code += '};\n';
        });
    }
    return code;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ö–µ–º—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TS-—Ñ–∞–π–ª.
 * @param {string} apiUrl - URL API FMP.
 * @param {string} authToken - –¢–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
 * @param {string} outputDir - –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è .ts-—Ñ–∞–π–ª–∞.
 */
async function generateTSFromFMP(apiUrl, authToken, outputDir) {
    try {
        console.log('üîó Loading FMP schema...');
        const schema = await fetchFMPSchema(apiUrl, authToken);

        safeCleanDir(outputDir);

        console.log('üìù Generating TS interfaces...');
        // –ì–ª–∞–≤–Ω—ã–π index.ts –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        const mainIndexExports = [];

        for (const [entityName, entity] of Object.entries(schema)) {
            const groupName = sanitizeInterfaceName(entityName);
            const groupDir = createGroupDir(outputDir, groupName);
            const groupInterfaces = [];

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Request (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if (entity.input && hasFields(entity.input)) {
                const interfaceCode = generateInterfaceCode(`${groupName}_Request`, entity.input);
                fs.writeFileSync(path.join(groupDir, 'Request.ts'), interfaceCode);
                groupInterfaces.push('Request');
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Response (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if (entity.output && entity.output.length > 0) {
                const interfaceCode = generateInterfaceCode(`${groupName}_Response`, {tabular: entity.output});
                fs.writeFileSync(path.join(groupDir, 'Response.ts'), interfaceCode);
                groupInterfaces.push('Response');
            }

            // –°–æ–∑–¥–∞–µ–º index.ts –¥–ª—è –≥—Ä—É–ø–ø—ã
            if (groupInterfaces.length > 0) {
                generateGroupIndex(groupDir, groupInterfaces);
                mainIndexExports.push(`export * as ${groupName} from './${groupName}';`);
            } else {
                fs.rmSync(groupDir, {recursive: true});
            }
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ index.ts
        fs.writeFileSync(path.join(outputDir, 'index.ts'), mainIndexExports.join('\n'));

    } catch (error) {
        console.error('‚ùå Error:', error.message);
        process.exit(1);
    }
}

module.exports = {generateTSFromFMP};
